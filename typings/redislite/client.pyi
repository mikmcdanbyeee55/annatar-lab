"""
This type stub file was generated by pyright.
"""

import redis

"""
This type stub file was generated by pyright.
"""
logger = ...
class RedisLiteException(Exception):
    """
    Redislite Client Error exception class
    """
    ...


class RedisLiteServerStartError(Exception):
    """
    Redislite redis-server start error
    """
    ...


class RedisMixin:
    """
    Extended version of the redis.Redis class with code to start/stop the
    embedded redis server based on the passed arguments.
    """
    redis_dir = ...
    pidfile = ...
    socket_file = ...
    connection = ...
    start_timeout = ...
    running = ...
    dbfilename = ...
    dbdir = ...
    settingregistryfile = ...
    cleanupregistry = ...
    redis_configuration = ...
    redis_configuration_filename = ...
    def __init__(self, *args, **kwargs) -> None:
        """
        Wrapper for redis.Redis that configures a redis instance based on the
        passed settings.

        Parameters
        ==========
        db_filename : str, optional
            Path to the redis rdb file to back the redis instance, if not
            specified one will be created inside a temporary directory for
            the instance.

        serverconfig : dict, optional
            A dict containing redis server settings.  The key is the setting
            the value can be a string, list or None.

            If the value is a string it will be used as the value in the redis
            configuration.

            If the value is a list the same setting will be repeated multiple
            times in the redis configuration with each value in order.

            If the value is None, the setting will be removed from the
            default configuration if it is set.
        """
        ...
    
    def __del__(self):
        ...
    
    def redis_log_tail(self, lines=..., width=...):
        """
        The redis log output


        Parameters
        ----------
        lines : int, optional
            Number of lines from the end of the logfile to return, a value of
            0 will return all lines, default=1

        width : int, optional
            The expected average width of a log file line, this is used to
            determine the chunksize of the seek operations, default=80

        Returns
        -------
        list
            List of strings containing the lines from the logfile requested
        """
        ...
    
    @property
    def redis_log(self):
        """
        Redis server log content as a string

        Returns
        -------
        str
            Log contents
        """
        ...
    
    @property
    def db(self):
        """
        Return the connection string to allow connecting to the same redis
        server.
        :return: connection_path
        """
        ...
    
    @property
    def pid(self):
        """
        Get the current redis-server process id.

        Returns:
            pid(int):
                The process id of the redis-server process associated with this
                redislite instance or None.  If the redis-server is not
                running.
        """
        ...
    


class BaseRedis(redis.Redis):
    ...


class Redis(RedisMixin, BaseRedis):
    """
    This class provides an enhanced version of the :class:`redis.Redis()` class
    that uses an embedded redis-server by default.


    Parameters
    ----------

    dbfilename : str, optional

        The name of the Redis db file to be used.

        This argument is only used if the embedded redis-server is used.

        The value of this argument is provided as the "dbfilename" setting in
        the embedded redis server configuration.  This will result in the
        embedded redis server dumping it's database to this file on exit/close.

        This will also result in the embedded redis server using an
        existing redis rdb database if the file exists on start.

        If this file exists and is in use by another redislite instance,
        this class will get a reference to the existing running redis
        instance so both instances share the same redis-server process
        and don't corrupt the db file.

    serverconfig : dict, optional

        A dictionary of additional redis-server configuration settings.
        The key is the name of the setting in the configuration file, the
        values may be list, str, or None.

        If the value is a list the setting will be repeated in the
        configuration, once for each value.

        If the value is a string, the setting will occur once with that string
        as the setting.

        If the value is None, the setting will be removed from the default
        setting values if it exists in the defaults.

    host : str, optional

        The hostname or ip address of the redis server to connect to.

        If this argument is specified the embedded redis server will not be
        used.

    port : int, optional

        The port number of the redis server to connect to.

        If this argument is specified, the embedded redis server will not be
        used.

    **kwargs : optional
        All other keyword arguments supported by the :py:class:`redis.Redis()`
        class are supported.

    Returns
    -------

    A :class:`redislite.Redis()` object

    Raises
    ------

    RedisLiteServerStartError
        The embedded Redis server failed to start

    Example
    -------

    redis_connection = :class:`redislite.Redis('/tmp/redis.db')`

    Notes
    -----

    If the dbfilename argument is not provided each instance will get a
    different redis-server instance.


    Attributes
    ----------

    db : str
        The fully qualified filename associated with the redis dbfilename
        configuration setting.  This attribute is read only.

    logfile : str
        The name of the redis-server logfile

    pid :int
        Pid of the running embedded redis server, this attribute is read
        only.

    redis_log : str
        The contents of the redis-server log file

    start_timeout : float
        Number of seconds to wait for the redis-server process to start
        before generating a RedisLiteServerStartError exception.
    """
    ...


class BaseStrictRedis(redis.StrictRedis):
    ...


class StrictRedis(RedisMixin, BaseStrictRedis):
    """
    This class provides an enhanced version of the :class:`redis.StrictRedis()`
    class that uses an embedded redis-server by default.


    Example:
        redis_connection = :class:`redislite.StrictRedis('/tmp/redis.db')`


    Notes:
        If the dbfilename argument is not provided each instance will get a
        different redis-server instance.


    Args:
        dbfilename(str):
            The name of the Redis db file to be used.  This argument is only
            used if the embedded redis-server is used.  The value of this
            argument is provided as the "dbfilename" setting in the embedded
            redis server configuration.  This will result in the embedded redis
            server dumping it's database to this file on
            exit/close.  This will also result in the embedded redis server
            using an existing redis database if the file exists on start.
            If this file exists and is in use by another redislite instance,
            this class will get a reference to the existing running redis
            instance so both instances share the same redis-server process
            and don't corrupt the db file.

    Kwargs:
        host(str):
            The hostname or ip address of the redis server to connect to.  If
            this argument is not None, the embedded redis server will not be
            used.  Defaults to None.

        port(int): The
            port number of the redis server to connect to.  If this argument is
            not None, the embedded redis server will not be used.  Defaults to
            None.

        serverconfig(dict): A dictionary of additional redis-server
            configuration settings.  All keys and values must be str.
            Supported keys are:
                activerehashing,
                aof_rewrite_incremental_fsync,
                appendfilename,
                appendfsync,
                appendonly,
                auto_aof_rewrite_min_size,
                auto_aof_rewrite_percentage,
                aof_load_truncated,
                databases,
                hash_max_ziplist_entries,
                hash_max_ziplist_value,
                hll_sparse_max_bytes,
                hz,
                latency_monitor_threshold,
                list_max_ziplist_entries,
                list_max_ziplist_value,
                logfile,
                loglevel,
                lua_time_limit,
                no_appendfsync_on_rewrite,
                notify_keyspace_events,
                port,
                rdbchecksum,
                rdbcompression,
                repl_disable_tcp_nodelay,
                slave_read_only,
                slave_serve_stale_data,
                stop_writes_on_bgsave_error,
                tcp_backlog,
                tcp_keepalive,
                unixsocket,
                unixsocketperm,
                slave_priority,
                timeout,
                set_max_intset_entries,
                zset_max_ziplist_entries,
                zset_max_ziplist_value

    Returns:
        A :class:`redis.StrictRedis()` class object if the host or port
        arguments where set or a :class:`redislite.StrictRedis()` object
        otherwise.

    Raises:
        RedisLiteServerStartError


    Attributes:
        db(string):
            The fully qualified filename associated with the redis dbfilename
            configuration setting.  This attribute is read only.

        pid(int):
            Pid of the running embedded redis server, this attribute is read
            only.

        start_timeout(float):
            Number of seconds to wait for the redis-server process to start
            before generating a RedisLiteServerStartError exception.
    """
    ...


